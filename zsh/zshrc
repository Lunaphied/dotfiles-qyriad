# Lines configured by zsh-newuser-install
HISTFILE=$HOME/.cache/zsh/histfile
HISTSIZE=9000
SAVEHIST=9000
#setopt appendhistory
setopt sharehistory
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall

#zstyle ':completion:*' completer _complete _ignored
zstyle ':completion:*' completer _complete _ignored _expand _correct _approximate
# new
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' 'r:|[._-]=* r:|=*' 'r:|[._-/]=* r:|=* l:|=*'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}'
zstyle ':completion:*' menu select=1
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle :compinstall filename '/home/qyriad/.zshrc'

FPATH+=":$HOME/.config/zsh/zfunc"
autoload -Uz compinit
compinit
# End of lines added by compinstall

zstyle ':completion:*' rehash true

setopt AUTO_CONTINUE

autoload -Uz promptinit

promptinit

setopt PROMPT_SUBST

setopt cbases

setopt autopushd

bindkey "^[[1;3D" backward-word # <A-<Left>>
bindkey "^[[1;3C" forward-word # <A-<Right>>
bindkey "^[[1~" beginning-of-line # <home>
bindkey "^[[4~" end-of-line # <end>
bindkey "^[[3~" delete-char # <del>
bindkey "<M-Del>" kill-word # <S-Del>

# Allow editing the command in vim
autoload -Uz edit-command-line # Load the function from ZSH runtime 
zle -N edit-command-line # Expose the function as a widget
bindkey "" "edit-command-line" # Call the widget upon <C-X><C-E>

# This zle widget funcvtion cancels the current command, keeping the buffer,
# and moving to the next line, but without setting the error code
function enter-without-exec()
{
	# store our buffer, since we're about to delete it
	buf="${BUFFER}"
	zle kill-buffer
	# print it again, and move to the next line
	print "${buf}"
	_zsh_highlight
	# print the promptâ€”zsh won't do it for us since it doesn't see this as a new command buffer
	print -n -P "${PS1}"
}

# expose the function as a widget and bind it
zle -N enter-without-exec
bindkey "" enter-without-exec

# zle widget function for bash-style word kill
function bash-backward-kill-word()
{
	#local WORDCHARS="${WORDCHARS:s/\///}"
	local WORDCHARS="${WORDCHARS//[^[:alnum:]]/}"
	zle backward-kill-word
}

# expose the function as a widget and bind it
zle -N bash-backward-kill-word
# ^[08 is <C-<BS>>, which I bound in Alacritty's config
bindkey '^[08' bash-backward-kill-word

# zle widget function for bash-style word movement left
function bash-backward-word()
{
	local WORDCHARS="${WORDCHARS//[^[:alnum:]]/}"
	zle backward-word
}

# expose the function as a widget and bind it
zle -N bash-backward-word
# Alacritty default for <C-<Left>>
bindkey '^[[1;5D' bash-backward-word

# zle widget function for bash-style word-movement right
function bash-forward-word()
{
	local WORDCHARS="${WORDCHARS//[^[:alnum:]]/}"
	zle forward-word
}

# expose the function as a widget and bind it
zle -N bash-forward-word
# Alacritty default for <C-<Right>>
bindkey '^[[1;5C' bash-forward-word

# Add shortcut for pushing the line onto the stack
bindkey "" "push-input"

# <Esc>ia for select-in-shell-word
bindkey 'ia' select-in-shell-word

# <Esc>v for toggle visual mode
bindkey 'v' visual-mode

# <Esc>u for undo
bindkey 'u' undo

# completion help
bindkey '' _complete_help


export PATH="$HOME/.local/bin:/usr/local/bin:$HOME/.local/share/cargo/bin:$PATH"

# Use neovim for everything
export EDITOR="/usr/bin/nvim"
export VISUAL="/usr/bin/nvim"
export SYSTEMD_EDITOR="/usr/bin/nvim"
export NETCTL_EDITOR="/usr/bin/nvim"
alias vim='nvim'

# Make stuff follow XDG
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export CARGO_HOME="$XDG_DATA_HOME"/cargo
#export GNUPGHOME="$XDG_CONFIG_HOME"/gnupg
export LESSHISTFILE="$XDG_CACHE_HOME"/less/history
export LESSKEY="$XDG_CONFIG_HOME"/less/lesskey
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
#export VIMINIT=':let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
export VIMCONFIG="$XDG_CONFIG_HOME/nvim"
alias tmux='tmux -u -f "$XDG_CONFIG_HOME"/tmux/tmux.conf'
export XCOMPOSEFILE="$XDG_CONFIG_HOME/X11/Xcompose"

alias cmc="rm -rf CMakeCache.txt CMakeFiles Makefile cmake_install.cmake"
alias ec="vim CMakeLists.txt"

export PAGER="less"

# Coreutils and builtins
alias lls='command ls --color=always'
alias ls='exa -gFhb --group-directories-first'
alias ll="ls -lh"
alias la="ls -Al"
alias cp="cp -vi"
alias rm="rm -vi"
alias mv="mv -vi"
alias ln="ln -vi"
alias chown="chown -v --preserve-root"
alias chmod="chmod -v --preserve-root"
alias chgrp="chgrp -v --preserve-root"
alias grep="grep --color=auto"
alias egrep='egrep --color=auto'
alias less="less -R"

# Edit config shortucts
alias et="$EDITOR $HOME/.config/tmux/tmux.conf"
alias ev="$EDITOR $HOME/.config/nvim/init.vim"
alias ei3="$EDITOR $HOME/.config/i3/config"
alias eb="$EDITOR $HOME/.config/bash/bashrc"
alias ex="$EDITOR $HOME/.xinitrc"
alias exr="$EDITOR $HOME/.config/X11/Xresources"
alias ei="$EDITOR $HOME/.config/i3/config"
alias sb="source $HOME/.bashrc"
alias er="$EDITOR $HOME/.config/ranger/rc.conf"
alias ea="$EDITOR $HOME/.config/alacritty/alacritty.yml"
alias ef="$EDITOR $HOME/.config/fontconfig/fonts.conf"
alias ez="$EDITOR $HOME/.config/zsh/zshrc"
alias sz="source $HOME/.zshrc"
alias exz='exec zsh'
alias es="$EDITOR $HOME/.ssh/config"
alias ek="$EDITOR $HOME/.config/kitty/kitty.conf"
alias etr="$EDITOR $HOME/.config/termite/config"

# Color output
alias df='grc df'
alias free='grc free'
alias ifconfig='grc ifconfig'
alias mount='grc mount'
alias netstat='grc netstat'
alias ping='grc ping'
alias as='grc as'
alias last='grc last'

# Forced color output (for piping)
alias grcc='grc --colour=on'
alias grepc='grep --color=always'
alias egrepc='egrep --color=always'
alias jqc='jq --color-output'
alias watchc='watch --color'

# fd and rg no ignore
# use -E, --exclude for globbing
alias fdi='fd --no-ignore'
alias fdih='fd --no-ignore --hidden'
# use -g, --glob for globbing (! negates)
alias rgi='rg --no-ignore'
alias rgih='rg --no-ignore --hidden'

# Misc
alias wgetc="wget --content-disposition" # Uses server filename across redirects
alias ni="nonet"
alias info="pinfo"
alias sudoe="sudo -E" # I shouldn't always, but sometimes it's really nice to preserve env when editing
alias sudos="sudo -Es"
alias gpc='gpaste-client'
alias xdgo='xdg-open'
alias ffprobe="ffprobe -hide_banner"
alias ffmpeg='ffmpeg -hide_banner'
alias mpv='mpv --osd-fractions'
alias prp='realpath .' # "Print real path"
alias tn="tr -d '\n'" # Strip newlines, meant to be used when copying one line of command output to clipboard
alias remake='mkdir $(pwd) ; cd $(pwd)'
alias svim="sudo -E nvim"
alias visudo='sudo -E visudo'
alias vipw='sudo -E vipw'
alias vigr='sudo -E vigr'
alias vrt='nvr --remote-silent -sp' # Vim Remote Tab
#alias yay='GNUPGHOME=$HOME/.config/makepkg.gnupg ; gnome-session-inhibit --inhibit suspend --reason yay yay'
#alias makepkg='gnome-session-inhibit --inhibit suspend --reason makepkg makepkg'
alias xxpreview='xxd -l 512'
#alias lsync='rsync -av --no-o --no-p --no-g --info=progress2'
#alias lsync='gnome-session-inhibit --inhibit logout:suspend:idle --reason rsync rsync -rvhh --links --checksum --whole-file --info=progress2'
alias rsync='gnome-session-inhibit --inhibit logout:suspend:idle --reason rsync rsync --recursive -hh --links -v --info=PROGRESS2'
alias rsyncn='rsync --recursive -hh --links -v --info=PROGRESS2'
alias lsync='gnome-session-inhibit --inhibit logout:suspend:idle --reason rsync rsync --whole-file --recursive -hh --links -v --info=PROGRESS2'
alias lsyncn='rsync -rvhh --links --checksum --whole-file --info=progress2'
alias what='whence -savf' # show symlinks too
#alias built-in-man='vim "+tab Man zshall | normal
alias lsdsk='lsblk -o NAME,FSTYPE,LABEL,TYPE,MOUNTPOINT,SIZE'
alias lsd='lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL,PARTLABEL,PARTTYPE'
alias wine32="WINEPREFIX=$HOME/.wine32 WINEARCH=win32 wine"
alias winetricks32="WINEPREFIX=$HOME/.wine32 WINEARCH=win32 winetricks"
alias ddf='pydf'
alias userctl='systemctl --user'
alias sudo='sudo '
alias ins='insect'
alias time='command time -f "%U user %S system %E elapsed %P%% CPU"'
alias cargo-install='RUSTFLAGS="-C target-cpu=native" cargo install'
alias progress='progress -a atool -a aunpack -a apack -a unzip'
alias pm='progress -a atool -a aunpack -a apack -a unzip -M'
alias qmount='mount -o uid=$(id -u)'
#alias inhibit='systemd-inhibit --what=shutdown:sleep:idle:handle-power-key:handle-suspend-key:handle-hibernate-key:handle-lid-switch --mode=block'
alias inhibit='gnome-session-inhibit --inhibit logout:suspend:idle --reason "manually inhibited"'
alias htopshort="HTOPRC=$HOME/.config/htop/alt.htoprc htop"

# Disable suspending while `yay` is running
function yay()
{
	#(GNUPGHOME=$HOME/.config/makepkg.gnupg ; systemd-inhibit --what=idle:sleep --who=qyriad --why=yay yay "$@")
	(GNUPGHOME=$HOME/.config/makepkg.gnupg ; gnome-session-inhibit --inhibit logout:suspend:idle --reason yay yay "$@")
}

# Disable suspending while `makepkg` is running
function makepkg()
{
	#(GNUPGHOME=$HOME/.config/makepkg.gnupg ; systemd-inhibit --what=idle:sleep --who=qyriad --why=makepkg makepkg "$@")
	(GNUPGHOME=$HOME/.config/makepkg.gnupg ; gnome-session-inhibit --inhibit logout:suspend:idle --reason makepkg makepkg "$@")
	#echo "Disabling suspension"
	#current=$(gsettings get org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout | awk '{print $2}')
	#gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 0
	#makepkg "$@"
	#echo "Enabling suspension"
	#gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout $current
}

function appfd()
{
	fd "$1" /usr/share/applications ~/.local/share/applications
}

function apprg()
{
	rg "$1" /usr/share/applications ~/.local/share/applications
}

function tmuxman()
{
	man tmux | vim "+set ft=man | normal /\v^\s+$1 (\[|-)"
}

function vimman()
{
	man $1 | vim "+set ft=man"
}

function zshman()
{
	man zshall | vim "+set ft=man | normal /\v^\s+$1 (\[|-)"
}

function bak()
{
	if [ -e "$1" ]; then
		mv "$1" "$1.bak"
	else
		echo "File \"$1\" not found"
	fi
}

function unbak()
{
	if [ -e "$1" ]; then
		mv "$1" "${1%.bak}" # Strip trailing .bak
	elif [ -e "$1.bak" ]; then
		mv "$1.bak" "$1"
	else
		echo "File \"$1\" not found"
	fi
}

function rekey()
{
	export GPG_TTY="$(tty)"
	export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
	gpg-connect-agent updatestartuptty reloadagent /bye > /dev/null
}

function bwsearch()
{
	bw list items --search "$1" | jq '[.[] | {id: .id, name: .name, username: .login.username, url: .login.uris[].uri}]'
}

function bwgetpw()
{
	bw get password "$1"
}

function bwcppw()
{
	bw get password "$1" | tr -d '\n' | gpaste-client
}

function source_if()
{
	[ -r "$1" ] && source "$1"
}

source_if /usr/share/git/completion/git-prompt.sh
autoload -Uz vcs_info

#zstyle ':vcs:info:*' disable bzr cdv darcs mtn svk tla darcs fossil mtn p4
zstyle ':vcs_info:*' enable git cvs svn hg

precmd()
{
	vcs_info
}

zstyle ':vcs_info:git*' formats '%F{116}(%b)'
zstyle ':vcs_info:git*' actionformats '%F{116}(%b|%a|%m)'

export PROMPT='%F{2}%n@%m %F{129}%~${vcs_info_msg_0_:+ ${vcs_info_msg_0_}} %(?..%F{1}[%?] )%F{2}%(! # $) %f'
#export RPROMPT='$?'
unset RPROMPT

zstyle ':completion:*:*:git:*' script /usr/share/git/completion/git-completion.zsh

#source_if /usr/share/git/completion/git-completion.zsh
source_if /usr/share/git/completion/git-prompt.sh
source_if /etc/profile.d/cnf.sh
source_if /etc/profile.d/devkitarm.sh
source_if /etc/profile.d/devkitppc.sh


#export X_ZSH_HIGHLIGHT_DIRS_BLACKLIST=('/media/*/*')

#source_if /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
typeset -Ag FAST_HIGHLIGHT
FAST_HIGHLIGHT[use_async]=1
source_if /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
source_if /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

source_if /usr/share/zsh/scripts/zplug/init.zsh

zplug "lambda/zsh-snippets"
zplug "ael-code/zsh-colored-man-pages"
zplug "agkozak/zsh-z"
zplug load

alias zsp='zsh_snippets'
bindkey "<M-s>" zsh-snippets-widget-expand

# willinghatch/zsh-snippets
# momo-lab/zsh-abbrev-alias

source_if $HOME/.local/bin/zsh_automatic_cd.zsh && bindkey -s '' 'ranger' && alias ranger='ranger-cd'

unalias run-help 2>/dev/null
autoload -Uz run-help

# udevadm custom completion extension
_udevadm 2> /dev/null
functions[_udevadm-orig]=$functions[_udevadm_info]
_udevadm_info()
{
	_udevadm-orig "$@"
    _arguments \
	'*: :_files'
}


if [ -z "$TMUX" ]; then # If we're not already in a tmux session
	#if [ "$(tty)" != "/dev/tty2" ]; then # and we're not in tty1
	s="$(tty)"
	if [[ ! "$(tty)" =~ "/dev/tty" ]]; then
		if tmux list-sessions; then # if there's a session, attach
			#tmux attach-session -d
		else
			tmux # otherwise, create one
		fi
	fi
fi
