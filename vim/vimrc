" vim:syntax=vim:textwidth=0

if !has("nvim")
	set nocompatible
endif

" Disable python 2
let g:loaded_python_provider = 1

" Set runtime directories and stuff
if !has("nvim")
	set directory=$XDG_CACHE_HOME/vim/swap
	set backupdir=$XDG_CACHE_HOME/vim/backup
	set undodir=$XDG_CACHE_HOME/vim/undo
	" Put netrwhist in XDG_CACHE_HOME
	let g:netrw_home=$XDG_CACHE_HOME.'/vim'
else
	"set directory=$HOME/.local/share/nvim/swap
	"set backupdir=$HOME/.local/share/nvim/backup
	"set undodir=$HOME/.local/share/nvim/undo
endif

if !has('nvim')
	set viminfo+='1000,n$XDG_CACHE_HOME/viminfo
else
	set viminfo+='1000,n$XDG_CACHE_HOME/nviminfo
endif

set runtimepath+=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,/usr/share/vim/vimfiles,$XDG_CONFIG_HOME/vim/after/

" Allow cursor change in tmux
if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
	let &t_SI = "\e[5 q"
	let &t_EI = "\e[2 q"
endif

" Vundle stuff
filetype off
set runtimepath+=~/.config/vim/bundle/Vundle.vim
call vundle#begin('~/.config/vim/plugins')
Plugin 'VundleVim/Vundle.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'chrisbra/colorizer'
Plugin 'Alvarocz/vim-fresh'
Plugin 'skywind3000/quickmenu.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-characterize'
"Plugin 'scrooloose/nerdtree'
Plugin 'Valloric/YouCompleteMe'
Plugin 'w0rp/ale'
Plugin 'Konfekt/vim-alias'
"Plugin 'gcmt/taboo.vim'
"Plugin 'roxma/nvim-yarp'
call vundle#end()
" /Vundle stuff

runtime ftplugin/man.vim

syntax on
filetype plugin indent on

set exrc
set secure
set number " Show line numbers
set norelativenumber " Make line numbers relative (except the current one)
set modeline " Allow vim meta commands in text files
set undofile " Persistent undo tree
set incsearch " Incremental search
set hlsearch " Highlight all matches of a search not just the current one
set tabstop=4 " Number of visual spaces to be displayed per HT
set noexpandtab " Don't 'expand' tabs to spaces
set shiftwidth=0 " Use tabstop value for indenting
set showcmd " Show the last command in the bottom bar
set lazyredraw " Only redraw when we need to
set scrolloff=12 " Keep 12 lines between the end of the buffer and the cursor
set sidescrolloff=2 " Keep 2 characters between the current column and the screen edge
set mouse=n " Enable the mouse in normal mode
set colorcolumn=120 " It's typically good to keep lines of code under 120 characters
set wildmenu " Autocomplete command menu
set wildmode=longest:full,full " Most bash-like way
set wildignorecase
set cursorcolumn " Highlight the column the cursor is on
set cursorline " Highlight the line the cursor is on
set timeoutlen=1000 ttimeoutlen=10 " Remove <Esc> leaving insert mode delay
set noshowmode " We're using Airline, so showing mode like this is redundant
set splitright " Make :vsplit put the new window on the right, not the left
set splitbelow " Same as above, but on the bottom with horizontal splits
set foldlevel=1 " Usually, collapse to function definitions in classes, not the classes themselves
set hidden " Allow for hidden, modified but not written buffers
set bufhidden=hide " Hide buffers instead of deleting or unloading them
set ignorecase
set smartcase
set gdefault " Substitute all matches in a line by default
set cindent
set cinoptions=1l,j1 " Indent case blocks correctly; indent Java anonymous classes correctly

set omnifunc=syntaxcomplete#Complete

let g:ale_c_parse_compile_commands = 1
"let g:ale_c_build_dir_names = '.'
let g:ale_linters = {'c': ['ccls', 'clang'], 'rust': ['rls', 'cargo']}
let g:ale_c_ccls_init_options = { 'clang': { 'extraArgs': ['-isystem', '/usr/include', '-isystem', '/usr/include/usbutils-010'] } }

"inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : 

"let g:NERDSpaceDelims = 1

augroup python_foldlevel
	autocmd! FileType python set foldlevel=4
augroup END

let g:NERDAltDelims_python = 1

let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_global_ycm_extra_conf = "$HOME/.ycm_conf.py"
let g:ycm_extra_conf_globlist = ['.ycm_extra_conf.py']
let g:ycm_semantic_triggers = { 'c' : ['#'] }
let g:ycm_show_diagnostics_ui = 0
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_echo_current_diagnostic = 0
" let g:ycm_filter_diagnostics = { '*': { 'regex': '*', 'level': 'warning' } } 

augroup vim_comments
	autocmd! FileType vim setlocal formatoptions-=cro
augroup END

" Only highlight the cursor postiion in the current window
augroup cursorpos_currentwin
	autocmd! WinLeave * set nocursorline nocursorcolumn
	autocmd! WinEnter * set cursorline cursorcolumn
augroup END

function! Togglenumber() " Toggle relativenumbers for all filetypes except 'help'
	if &ft=~ 'help'
		return
	endif
	set relativenumber!
endfun

" augroup numbertoggle
"	autocmd!
"	autocmd BufEnter,FocusGained,InsertLeave * call Togglenumber()
"	autocmd BufLeave,FocusLost,InsertEnter * call Togglenumber()
" augroup END

set norelativenumber

nnoremap <F3> :set number! relativenumber!<CR>

function! Gitrebase_menu()
	let g:quickmenu_options = "LHT"
	let g:quickmenu_padding_right = 15
	let g:quickmenu_max_width = 200
	call g:quickmenu#current(0)
	call g:quickmenu#reset()
	call g:quickmenu#header("Git Rebase")
	call g:quickmenu#append('Pick', 'execute "normal ^cwpick\<ESC>^"', 'use commit')
	call g:quickmenu#append('Reword', 'execute "normal ^cwreword\<ESC>^"', 'use commit but edit the commit message')
	call g:quickmenu#append('Edit', 'execute "normal ^cwedit\<ESC>^"', 'use commit, but stop for amending')
	call g:quickmenu#append('Squash', 'execute "normal ^cwsquash\<ESC>^"', 'use commit, but meld into previous commit')
	call g:quickmenu#append('Fixup', 'execute "normal ^cwfixup\<ESC>^"', 'like "squash", but discard this commit''s log message')
	call g:quickmenu#append('eXec', 'execute "normal ^cwexec\<ESC>^"', 'run command (the rest of the line) using shell')
	call g:quickmenu#append('Drop', 'execute "normal ^cwdrop\<ESC>^"', 'remove commit')
	call g:quickmenu#toggle(0)
endfunction

nnoremap <leader>gr :call Gitrebase_menu()<CR>

function! Gitrebase_quickmenu_mappings()
	" We actually specifically *want* recursive mappings here
	nmap <buffer> p 1
	nmap <buffer> r 2
	nmap <buffer> e 3
	nmap <buffer> s 4
	nmap <buffer> f 5
	nmap <buffer> x 6
	nmap <buffer> d 7
	nmap <buffer> dd 7
endfunction

augroup gitrebase_quickmenu
	autocmd! FileType quickmenu call Gitrebase_quickmenu_mappings()
augroup END

augroup gitrebase
	autocmd! FileType gitrebase nmap <buffer> <Tab> :call Gitrebase_menu()<CR>
augroup END

function! Same(cmd)
	" Get current tab number
	let l:current_tabpage = tabpagenr()
	" Open the last tab
	execute '$tab ' . a:cmd
	execute '$tabnext'
	let new_buffer = bufpagenr('%')
	execute l:current_tabpage . 'tabnext'
endfunction

augroup check_on_insert
	" CursorHold
	autocmd! InsertEnter,CursorHold,InsertChange,InsertLeave,InsertCharPre echom "Hello"
augroup END

augroup drirc_ft
	autocmd! BufNewFile,BufReadPre .drirc set filetype=xml
augroup END

augroup show_help_buffers
	autocmd! FileType help setlocal buflisted
augroup END

augroup term_line_numbers
	autocmd! TermOpen * setlocal nonumber | startinsert
augroup END

function! SyntaxItem()
	let synid = synID(line("."), col("."), 1)
	let trans = synIDtrans(synid)
	return synIDattr(synid, "name") . " | " . synIDattr(trans, "name") . " | " . synIDattr(trans, "fg")
endfunction

function! SyntaxColor()
	highlight SyntaxItem()
endfunction

function! HomeRelDir()
	"return substitute(expand('%:p:h'), $HOME, '~', 'e')
	let l:dir = fnamemodify(expand('%:p:h'), ':~:.')
	if l:dir ==? substitute(getcwd(), $HOME, '~', 'e')
		return ''
	else
		return l:dir
	endif

endfunction

function! LightlineReload()
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction

command! LightlineReload call LightlineReload()

function! BufSel(pattern)
	let bufcount = bufnr("$")
  let currbufnr = 1
  let nummatches = 0
  let firstmatchingbufnr = 0
  while currbufnr <= bufcount
	if(bufexists(currbufnr))
	  let currbufname = bufname(currbufnr)
	  if(match(currbufname, a:pattern) > -1)
		echo currbufnr . ": ". bufname(currbufnr)
		let nummatches += 1
		let firstmatchingbufnr = currbufnr
	  endif
	endif
	let currbufnr = currbufnr + 1
  endwhile
  if(nummatches == 1)
	execute ":buffer ". firstmatchingbufnr
  elseif(nummatches > 1)
	let desiredbufnr = input("Enter buffer number: ")
	if(strlen(desiredbufnr) != 0)
	  execute ":buffer ". desiredbufnr
	endif
  else
	echo "No matching buffers"
  endif
endfunction

command! -nargs=1 Bs :call BufSel("<args>")

highlight Pmenu guibg=#303030 guifg=#5a95f4

" Make the highlight color for the colorcolumn not obnoxious, but still stand out
highlight ColorColumn ctermbg=236 guibg=#303030
" Make the highlight color for the current column not obnoxious, and stand out a bit less than above
highlight CursorColumn ctermbg=234 guibg=#1c1c1c
" Make the highlight color for the current row not obnoxious and not underlined
highlight CursorLine ctermbg=234 cterm=NONE guibg=#1c1c1c
" Also bold the line number
highlight CursorLineNr cterm=bold
" Make the folded text color not suck
highlight Folded ctermbg=17

"highlight DiffAdd ctermbg=18 cterm=bold

" Enable true colors
execute "set t_8f=\e[38;2;%lu;%lu;%lum"
execute "set t_8b=\e[48;2;%lu;%lu;%lum"
set termguicolors
" Reset to term colors
highlight Statement guifg=#af5f00
highlight Comment guifg=#0aa6da
highlight PreProc guifg=#c397d8
highlight Identifier guifg=#70c0ba
highlight Constant guifg=#cf0002
highlight Type guifg=#00cc00
highlight Special guifg=#c397d8
"highlight! link LineNr Statement
highlight LineNr gui=none guifg=#af5f00
highlight CursorLineNr gui=bold guifg=#af5f00

" Diff colors that don't suck
highlight DiffAdd guibg=#002d77
highlight DiffText gui=bold guibg=#056d05
highlight DiffChange guifg=#243024
highlight DiffDelete guibg=#8e0000 guifg=#c6a5a5

" Actually be able to see searched stuff
highlight Search guibg=#a0a0a0

" Good purple 53
nnoremap <leader>ct :source $VIMRUNTIME/syntax/hitest.vim

let mapleader="\\"

" Stop highling last search with \/
 "| let @/=""
nnoremap <leader>/ :nohlsearch<CR>

" Edit and source vimrc shortcus
nnoremap <leader>ev :tabedit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" PluginInstall and PluginClean shortcuts
nnoremap <leader>pi :source $MYVIMRC<CR>:PluginInstall<CR>
nnoremap <leader>pc :source $MYVIMRC<CR>:PluginClean<CR>

" Save my pinky
nnoremap ; :

" New verb! X: delete to black hole (null) register
nnoremap X "_d
nnoremap XX "_dd

" Add ( here and ) at the next parenthesis
nnoremap <leader>) i(<Esc>t)a)<Esc>

" Have the indent commands re-highlight the last visual selection
vnoremap > >gv
vnoremap < <gv

nnoremap <F1> :vertical help<CR>

" gp: select pasted text
nnoremap gp `[v`]

" Unmap Q
nnoremap Q <nop>

" Alt+Backspace to kill-word
inoremap <A-BS> <C-w>

" Add newlines above and below without entering insert mode or moving the cursor
nnoremap <leader>o mso<Esc>`s
nnoremap <leader>O msO<Esc>`s

" Add newline at current position without entering insert mode or moving the cursor
nnoremap <leader><CR> msi<CR><Esc>`s

" List buffers
nnoremap <leader>b :buffers<CR>

" List all buffers
nnoremap <leader>ab :buffers!<CR>

" Switch buffer
"nnoremap <leader>sb :buffers<CR>:buffer 
nnoremap <leader>sb :Bs<CR>

" Switch between all buffers
nnoremap <leader>sab :buffers<CR>:buffer 

" Gstatus
nnoremap <leader>gs :tab Gstatus<CR>

function! Gtabeditcursor()
	execute "Gtabedit " expand("<cword>")
endfunction

" Gtabedit revision under cursor
nnoremap <leader>gte :call Gtabeditcursor()<CR>

function! Gvsplitcursor()
	execute "Gvsplit " expand("<cword>")
endfunction

" Gvsplit revision under cursor
nnoremap <leader>gve :call Gvsplitcursor()<CR>

" Close diff / close two windows
nnoremap <leader>dq :q<CR>:q<CR>

" Man page
nnoremap <leader>m :Man 

" 
cnoremap <M-BS> 

" Man -> man
"cnoreabbrev man Man
"Alias man Man

" I am fucking proud of this
" Explanation: Go to the beginning of the line, delete it, insert the result of:
"	Take the comment string template, replace %s with the contents of the line that just got deleted, return to normal
"	mode
nnoremap <leader>co ^Di<C-R>=substitute(&commentstring, "%s", ' ' . @", "")<CR><Esc>

" Yank from default register to gpaste clipboard
" Explantion: Run system command: `gpaste-client add`, send the @" register to stdin minus the last character
nnoremap <leader>Y :echo system("gpaste-client add", strpart(@", 0, strlen(@") - 1))<CR>

" Use escape to exit terminal mode
tnoremap <Esc> <C-\><C-n>

nnoremap <leader>y :YcmCompleter

nnoremap <Return> :ALEHover<CR>
nnoremap <M-Return> :ALEGoToDefinition<CR>

" Yes, I use tabs instead of spaces. Shoot me.
let g:python_recommended_style=0

set laststatus=2 " Always show statusline
" left_sep: 
" right_sep: 
" lock: 

let g:tab_dict = {}

function! Tab_Name(tabnum)
	" Check if the tabnum is in the tab_dict
	if has_key(tab_dict, tabnum)
		return tab_dict.tabnum
	else
		return lightline#tab#filename(tabnum)
	endif
endfunction

let g:lightline =
\{
	\	'active': { 
	\		'left': [['mode', 'paste'], ['readonly', 'filename', 'modified']],
	\		'right': [[], ['dir', 'filetype', 'lineinfo', 'percent', 'fileencoding', 'fileformat'], ['syncolor', 'syn']]
	\	},
	\	'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
	\	'component_function': { 'syn': 'SyntaxItem', 'dir': 'HomeRelDir' },
	\	'tab': { 'active': ['tabnum', 'filename', 'modified'], 'inactive': ['tabnum', 'filename', 'modified'] }
\}
