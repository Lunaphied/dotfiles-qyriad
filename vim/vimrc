" vim:syntax=vim:textwidth=0

if !has("nvim")
	set nocompatible
endif

" Set runtime directories and stuff
if !has("nvim")
	set directory=$XDG_CACHE_HOME/vim/swap
	set backupdir=$XDG_CACHE_HOME/vim/backup
	set undodir=$XDG_CACHE_HOME/vim/undo
	" Put netrwhist in XDG_CACHE_HOME
	let g:netrw_home=$XDG_CACHE_HOME.'/vim'
endif

if !has('nvim')
	set viminfo+='1000,n$XDG_CACHE_HOME/viminfo
else
	set viminfo+='1000,n$XDG_CACHE_HOME/nviminfo
endif

set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,/usr/share/vim/vimfiles,$XDG_CONFIG_HOME/vim/after/

" Allow cursor change in tmux
if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
	let &t_SI = "\e[5 q"
	let &t_EI = "\e[2 q"
endif

" Vundle stuff
filetype off
set runtimepath+=~/.config/vim/bundle/Vundle.vim
call vundle#begin('~/.config/vim/plugins')
Plugin 'VundleVim/Vundle.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'chrisbra/colorizer'
Plugin 'Alvarocz/vim-fresh'
Plugin 'skywind3000/quickmenu.vim'
Plugin 'tmhedberg/SimpylFold'
call vundle#end()
" /Vundle stuff

syntax on
filetype plugin indent on

set number " Show line numbers
set norelativenumber " Make line numbers relative (except the current one)
set modeline " Allow vim meta commands in text files
set undofile " Persistent undo tree
set incsearch " Incremental search
set hlsearch " Highlight all matches of a search not just the current one
set tabstop=4 " Number of visual spaces to be displayed per HT
set noexpandtab " Don't 'expand' tabs to spaces
set shiftwidth=0 " Use tabstop value for indenting
set showcmd " Show the last command in the bottom bar
set lazyredraw " Only redraw when we need to
set scrolloff=12 " Keep 12 lines between the end of the buffer and the cursor
set mouse=n " Enable the mouse in normal mode
set colorcolumn=120 " It's typically good to keep lines of code under 120 characters
set wildmenu " Autocomplete command menu
set cursorcolumn " Highlight the column the cursor is on
set cursorline " Highlight the line the cursor is on
set timeoutlen=1000 ttimeoutlen=10 " Remove <Esc> leaving insert mode delay
set noshowmode " We're using Airline, so showing mode like this is redundant
set splitright " Make :vsplit put the new window on the right, not the left
set splitbelow " Same as above, but on the bottom with horizontal splits
set foldlevel=1 " Usually, collapse to function definitions in classes, not the classes themselves
set hidden " Allow for hidden, modified but not written buffers
set bufhidden=hide " Hide buffers instead of deleting or unloading them

" Only highlight the cursor postiion in the current window
augroup cursorpos_currentwin
	autocmd! WinLeave * set nocursorline nocursorcolumn
	autocmd! WinEnter * set cursorline cursorcolumn
augroup END

function! Togglenumber() " Toggle relativenumbers for all filetypes except 'help'
	if &ft=~ 'help'
		return
	endif
	set relativenumber!
endfun

" augroup numbertoggle
" 	autocmd!
" 	autocmd BufEnter,FocusGained,InsertLeave * call Togglenumber()
" 	autocmd BufLeave,FocusLost,InsertEnter * call Togglenumber()
" augroup END

set norelativenumber

nnoremap <F3> :set number! relativenumber!<CR>

function! Gitrebase_menu()
	let g:quickmenu_options = "LHT"
	let g:quickmenu_padding_right = 15
	let g:quickmenu_max_width = 200
	call g:quickmenu#current(0)
	call g:quickmenu#reset()
	call g:quickmenu#header("Git Rebase")
	call g:quickmenu#append('Pick', 'execute "normal ^cwpick\<ESC>^"', 'use commit')
	call g:quickmenu#append('Reword', 'execute "normal ^cwreword\<ESC>^"', 'use commit but edit the commit message')
	call g:quickmenu#append('Edit', 'execute "normal ^cwedit\<ESC>^"', 'use commit, but stop for amending')
	call g:quickmenu#append('Squash', 'execute "normal ^cwsquash\<ESC>^"', 'use commit, but meld into previous commit')
	call g:quickmenu#append('Fixup', 'execute "normal ^cwfixup\<ESC>^"', 'like "squash", but discard this commit''s log message')
	call g:quickmenu#append('eXec', 'execute "normal ^cwexec\<ESC>^"', 'run command (the rest of the line) using shell')
	call g:quickmenu#append('Drop', 'execute "normal ^cwdrop\<ESC>^"', 'remove commit')
	call g:quickmenu#toggle(0)
endfunction

nnoremap <leader>gr :call Gitrebase_menu()<CR>

function! Gitrebase_quickmenu_mappings()
	" We actually specifically *want* recursive mappings here
	nmap <buffer> p 1
	nmap <buffer> r 2
	nmap <buffer> e 3
	nmap <buffer> s 4
	nmap <buffer> f 5
	nmap <buffer> x 6
	nmap <buffer> d 7
endfunction

augroup gitrebase_quickmenu
	autocmd! FileType quickmenu call Gitrebase_quickmenu_mappings()
augroup END

augroup gitrebase
	autocmd! FileType gitrebase nmap <buffer> <Tab> :call Gitrebase_menu()<CR>
augroup END

augroup check_on_insert
	" CursorHold
	autocmd! InsertEnter,CursorHold,InsertChange,InsertLeave,InsertCharPre echom "Hello"
augroup END

augroup drirc_ft
	autocmd! BufNewFile,BufReadPre .drirc set filetype=xml
augroup END

augroup show_help_buffers
	autocmd! FileType help setlocal buflisted
augroup END

function! SyntaxItem()
	let synid = synID(line("."), col("."), 1)
	let trans = synIDtrans(synid)
	return synIDattr(synid, "name") . " | " . synIDattr(trans, "name") . " | " . synIDattr(trans, "fg")
endfunction

function! SyntaxColor()
	highlight SyntaxItem()
endfunction

function! LightlineReload()
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfunction

command! LightlineReload call LightlineReload()

" Make the highlight color for the colorcolumn not obnoxious, but still stand out
highlight ColorColumn ctermbg=236 guibg=#303030
" Make the highlight color for the current column not obnoxious, and stand out a bit less than above
highlight CursorColumn ctermbg=234 guibg=#1c1c1c
" Make the highlight color for the current row not obnoxious and not underlined
highlight CursorLine ctermbg=234 cterm=NONE guibg=#1c1c1c
" Also bold the line number
highlight CursorLineNr cterm=bold
" Make the folded text color not suck
highlight Folded ctermbg=17

"highlight DiffAdd ctermbg=18 cterm=bold

" Enable true colors
execute "set t_8f=\e[38;2;%lu;%lu;%lum"
execute "set t_8b=\e[48;2;%lu;%lu;%lum"
set termguicolors
" Reset to term colors
highlight Statement guifg=#af5f00
highlight Comment guifg=#0aa6da
highlight PreProc guifg=#c397d8
highlight Identifier guifg=#70c0ba
highlight Constant guifg=#cf0002
highlight Type guifg=#00cc00
highlight Special guifg=#c397d8
highlight! link LineNr Statement
highlight CursorLineNr gui=bold guifg=#af5f00

" Diff colors that don't suck
highlight DiffAdd guibg=#002d77
highlight DiffText gui=bold guibg=#056d05
highlight DiffChange guifg=#243024
highlight DiffDelete guibg=#8e0000 guifg=#c6a5a5

" Good purple 53
nnoremap <leader>ct :source $VIMRUNTIME/syntax/hitest.vim

let mapleader="\\"

" Stop highling last search with \/
nnoremap <leader>/ :nohlsearch<CR> | let @/=""

" Edit and source vimrc shortcus
nnoremap <leader>ev :tabedit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" PluginInstall and PluginClean shortcuts
nnoremap <leader>pi :source $MYVIMRC<CR>:PluginInstall<CR>
nnoremap <leader>pc :source $MYVIMRC<CR>:PluginClean<CR>

" Save my pinky
nnoremap ; :

" New verb! X: delete to black hole (null) register
nnoremap X "_d
nnoremap XX "_dd

" Have the indent commands re-highlight the last visual selection
vnoremap > >gv
vnoremap < <gv

nnoremap <F1> :vertical help<CR>

" gp: select pasted text
nnoremap gp `[v`]

" Unmap Q
nnoremap Q <nop>

" Add newlines above and below without entering insert mode or moving the cursor
nnoremap <leader>o mso<Esc>`s
nnoremap <leader>O msO<Esc>`s

" Add newline at current position without entering insert mode or moving the cursor
nnoremap <leader><CR> msi<CR><Esc>`s

" List buffers
nnoremap <leader>b :buffers<CR>

" List all buffers
nnoremap <leader>ab :buffers!<CR>

" Switch buffer
nnoremap <leader>sb :buffers<CR>:buffer 

" Switch between all buffers
nnoremap <leader>sab :buffers<CR>:buffer 

" I am fucking proud of this
" Explanation: Go to the beginning of the line, delete it, insert the result of:
" 	Take the comment string template, replace %s with the contents of the line that just got deleted, return to normal
" 	mode
nnoremap <leader>co ^Di<C-R>=substitute(&commentstring, "%s", ' ' . @", "")<CR><Esc>

" Yank from default register to gpaste clipboard
" Explantion: Run system command: `gpaste-client add`, send the @" register to stdin minus the last character
nnoremap <leader>Y :call system("gpaste-client add", strpart(@", 0, strlen(@") - 1))<CR>

" Yes, I use tabs instead of spaces. Shoot me.
let g:python_recommended_style=0

set laststatus=2 " Always show statusline
" left_sep: 
" right_sep: 
" lock: 
let g:lightline =
\{
	\	'active': { 
	\		'left': [['mode', 'paste'], ['readonly', 'filename', 'modified']],
	\		'right': [[], ['filetype', 'lineinfo', 'percent', 'fileencoding', 'fileformat'], ['syncolor', 'syn']]
	\	},
	\	'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
	\	'component_function': { 'syn': 'SyntaxItem' }
\}
